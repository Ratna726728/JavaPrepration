:: JUMPING STATEMENTS ::

There are 2 types of jumping statements in java
1. Break
2. Continue

1. Break Statement:

The break statement in java is used to terminate a loop and break the current flow of program. or to jump out
of the loop.

break is a keyword.

syntax:
jump-statement;
break;

2. Continue statement:

continue is a keyword.

To jump to the next iteration of the loop, we make use of the continue statement. 
This statement continues the current flow of the program and skips part of the code at the specified condition

or 

It will skip the current iteration and continue with next iteration.

syntax:

jump-statement;
continue;


:: || ARRAYS AND STRINGS || ::

::ARRAYS::

An array is a container object that holds a fixed number of values of a single type.

The length of an array is established when the array is created. After creation, its length is fixed.

Arrays contains homogeneous data type data in array container object.

Each item in an array is called an element, and each element is accessed by its numerical index. The numbering begins with 0, to the last element.

For example if any array has length 10 then the first element wil be at 0th index and last element must be on 9th index.

By using the indexes we can easily locate the data from the container object.

There are 2 types of arrays:
1. single dimensional array
2. Multi-dimensional array


SYNTAX to declare an ARRAY: 
1. datatype[] arr;
2. datatype []arr;
3. datatype arr[];


How to instantiate an array:

int[] numbers = new int[3];


FOR-EACH loop for Java Array::

The java for-each loop can prints the array elements one by one. It holds an array 
element in a variable, then executes the body of the loop.

syntax:
for(data_type variable : array){
//body of the loop
}

Code on Arrays are in Day03 folder

:: Array Manipulations ::

Arrays are a powerful and useful concept used in programming. Java SE provides methods to perform some of the most common manipulations related to arrays. 

For instance, the ArrayCopyDemo example uses the arraycopy method of the System class instead of manually iterating through the elements of the source array and placing 
each one into the destination array. 

This is performed behind the scenes, enabling the developer to use just one line of 
code to call the method.

For our convenience, Java SE provides several methods for performing array 
manipulations (common tasks, such as copying, sorting and searching arrays) in the 
java.util.Arrays class.

Some other useful operations provided by methods in the java.util.Arrays class are:

1. Searching an array for a specific value to get the index at which it is placed 
(the binarySearch method).

STEPS:
-----------------------------------------------------------------------------------------------------
i. create and sort array
e.g. 
int arr[]=new int[]{10,54,7,24,63,100};
Arrays.sort(arr);

ii. print the sorted array(optional step just to confirm whether array is sorted or not)
e.g.
Syetem.out.println("Sorted Array : "+Arrays.toString(arr));

iii. Use binarySearch to find the index of a value
e.g.
int searchNum = 7 ;
int index = Arrays.binarySearch(arr, searchNum);

iv. Print the result
e.g.
if (index >= 0) {
  System.out.println("Element " + searchNum + " found at index: " + index);
} else {
  System.out.println("Element " + searchNum + " not found.");
}


Let's understand this with the code in Day03/ArrayExample/BinarySearch.java
----------------------------------------------------------------------------------------------------

2. Comparing two arrays to determine if they are equal or not (the equals method).

STEPS:
----------------------------------------------------------------------------------------------------
i. Create 2 or more arrays, atleast 2 arrays are required

ii. compare arrays using Array.equals()
e.g.
boolean isEqual1 = Arrays.equals(array1, array2);

Let's understand this with the code in Day03/ArrayExample/CompareArrays.java

----------------------------------------------------------------------------------------------------

3. Filling an array to place a specific value at each index (the fill method).

STEPS
----------------------------------------------------------------------------------------------------
i. Create an array of size
e.g.        
int[] numbers = new int[5];

ii. Fill the array with the value 
e.g.        
Arrays.fill(numbers, 7);

iii. Print the filled array
e.g.
System.out.println("Array after fill: " + Arrays.toString(numbers));


Let's understand thsi with the code in Day03/ArrayExample/FillMethod.java

---------------------------------------------------------------------------------------------------

4. Sorting an array into ascending order. This can be done either sequentially, using the sort method, or concurrently, using the parallelSort method introduced in 
Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than 
sequential array sorting.

--------------------------------------------------------------------------------------------------
Already done in 1.binary search
--------------------------------------------------------------------------------------------------

5. Creating a stream that uses an array as its source (the stream method). 
For example, the following statement prints the contents of the copyTo array in the 
same way as in the previous example:

java.util.Arrays.stream(copyTo).map(coffee -> coffee + " ").forEach(System.out::print);
See Aggregate Operations for more information about streams.

STEP
--------------------------------------------------------------------------------------------------
i. Create an array of strings
e.g.
String[] copyTo = {"Espresso", "Latte", "Cappuccino", "Mocha"};

ii. Use Arrays.stream to create a stream from the array
Add a space after each element and print using forEach
e.g.
Arrays.stream(copyTo)
              .map(coffee -> coffee + " ")
              .forEach(System.out::print);

CODE Day03/ArraysExample/StreamArray.java

---------------------------------------------------------------------------------------------------

6. Converting an array to a string. The toString method converts each element of the 
array to a string, separates them with commas, then surrounds them with brackets. For example, the following statement converts the copyTo array to a string and prints it:

System.out.println(java.util.Arrays.toString(copyTo));
This statement prints the following:

[Cappuccino, Corretto, Cortado, Doppio, Espresso, Frappucino, Freddo]



