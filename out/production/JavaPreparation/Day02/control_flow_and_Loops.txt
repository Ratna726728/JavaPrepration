:: Type Casting ::

Type casting is when you assign a value of one primitive data type to another type.

Type casting is applicable to primitive data types.

There are 2 types of type casting:
1. Widening casting
2. Narrowing casting

1. Widening casting:

Widening casting is done automatically when passing a smaller size data type to a larger size type.

byte >> short >> char >> int >> long >> float >> double

Please refer example code from Day02/Widening.java
2. Narrowing casting:

Narrowing casting must be done manually by placing the type in parantheses () in front of values.

double >> float >> long >> int >> char >> short >> byte

Please refer example code from Day02/Narrowing.java


:: Java Operators ::

Operators are used to perform operations on variables and values.

List of operators is as such follows:
1. Arithmetic Operator:

[ + , - , * , / , % ]

2. Logical operator:

Logical AND operator(&&) : if both conditions are true then result is true else false.
Logical OR Operator(||) : if both conditions are false then result is false else true.

3. Relational Operator:

Greater Than(>)
Less than(<)
Greater than or equal to(>=)
less than or equal to(<=)
Equal to (==)
Not equal to (!=)

4. Assignment operator:

variable = value;

= this sign is assignment operator

5. Bitwise Operator:

Bitwise AND operator(&) : if both conditions are true then true else false
Bitwise OR operator(|) : if both conditions are false then false else true

6. Unary Operator:

increment (++)
decrement (--)


7. Ternary Operator:

It includes three operands.

syntax:
(condition)?var1:var2;


8. Shift Operator

Right shift operator:

int a =10;
a>>2;

10>>2 <==> 10/2^2 <==> 10/4 ==2.5 == 2

Left shift Operator:
int a =10;
a<<2;

10<<2 <==> 10*2^2 <==> 10*4= 40


9. New Operator

the new operator is used to create new objects and allocate memory for them on the heap.
new operator:
Invokes the constructor.
Allocates memory on the heap.
Returns a reference to the created object.

10. Dot(.) operator

the dot operator (.) is used to access:
Class members (fields and methods)
Object members
Packages and classes
Nested classes or interfaces

Coding examples are in Day02/Operators.java file


:: CONTROL STATEMENT ::

Control statements in Java are used to control the flow of execution in a program based on conditions or loops. 
They allow your program to make decisions, repeat tasks, or jump to different parts of the code.

There are 3 types of control statements:
1. Decision-making statements
2. Looping statements
3. Jumping statements



1. Decision-making statements:

These are used to execute different blocks of code based on certain conditions.

Types of decision making statements:
i. if statement
ii. if-else statement
iii. if-else-if statement
iv. Nested if statement
v. switch statement

i. if statement:

If statement is true then if block is executed.

syntax:

if(condition){
statement;
}


ii. if-else statement:

If the statement is true then if block is executed, if statement is false then else block is
executed.

syntax:

if(condition){
statement1;
}else{
statement2;
}

iii. if-else-if statement:

the if-else-if ladder statement executes one condition from multiple statements.

if(condition1){
statement1;
}else if(condition2){
statement2;
}else if(condition3){
statement3;
}else{
statement4;
}


iv. Nested if statement:

The nested if statement represents the if block within another if block.

Syntax:

if(condition1){
if(condition2){
}
}

v. Switch Statement:

A switch statement in java is used to execute a single statement from multiple conditions.

Syntax:

switch(expression){
case1:
statement1;
break;

case2:
statement2;
break;

case3:
statement3;
break;

default:
default statement;

}


2. looping statement:

loops are used to execute a set of instructions repeatedly when some conditions beacome true.

There are 3 types of Loops in Java:
i. for loop
ii. while loop
iii. do while loop

i. for loop:

for loop is used to iterate and evaluate a code multiple times.

when to use- If the number of iterations are fixed.

syntax:

for(initialization; condition; increament/decrement){
statment1;
}


ii. While loop:

The while loop evalutes a certain condition. If the condition is true, the code executed.
this process is continued until the specified condition becomes false.

when to use- if the number of iterations is not fixed, it is recommended to use while loop.

syntax:

initialization;
while(condition){
statements;
increment/decrement;
}


iii. Do while loop:

the do while loop is similar to the while loop, the only difference being that the condition
in the do-while loop is evaluated after the execution of the loop body. This gurantees that
the loop is executed at least once.

When to use - If the number of iteration is not fixed and you must have to execute the loop
at least once, it is recommended to use the do-while loop.

syntax:

Initialization;
do{
statements;
increment/decrement;
}while(condition);

Codes in day02 folder

