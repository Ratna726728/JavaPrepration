:: JUMPING STATEMENTS ::

There are 2 types of jumping statements in java
1. Break
2. Continue

1. Break Statement:

The break statement in java is used to terminate a loop and break the current flow of program. or to jump out
of the loop.

break is a keyword.

syntax:
jump-statement;
break;

2. Continue statement:

continue is a keyword.

To jump to the next iteration of the loop, we make use of the continue statement. 
This statement continues the current flow of the program and skips part of the code at the specified condition

or 

It will skip the current iteration and continue with next iteration.

syntax:

jump-statement;
continue;


:: || ARRAYS AND STRINGS || ::

::ARRAYS::

An array is a container object that holds a fixed number of values of a single type.

The length of an array is established when the array is created. After creation, its length is fixed.

Arrays contains homogeneous data type data in array container object.

Each item in an array is called an element, and each element is accessed by its numerical index. The numbering begins with 0, to the last element.

For example if any array has length 10 then the first element wil be at 0th index and last element must be on 9th index.

By using the indexes we can easily locate the data from the container object.

There are 2 types of arrays:
1. single dimensional array
2. Multi-dimensional array


SYNTAX to declare an ARRAY: 
1. datatype[] arr;
2. datatype []arr;
3. datatype arr[];


How to instantiate an array:

int[] numbers = new int[3];


FOR-EACH loop for Java Array::

The java for-each loop can prints the array elements one by one. It holds an array 
element in a variable, then executes the body of the loop.

syntax:
for(data_type variable : array){
//body of the loop
}

Code on Arrays are in Day03 folder

:: Array Manipulations ::

Arrays are a powerful and useful concept used in programming. Java SE provides methods to perform some of the most common manipulations related to arrays. 

For instance, the ArrayCopyDemo example uses the arraycopy method of the System class instead of manually iterating through the elements of the source array and placing 
each one into the destination array. 

This is performed behind the scenes, enabling the developer to use just one line of 
code to call the method.

For our convenience, Java SE provides several methods for performing array 
manipulations (common tasks, such as copying, sorting and searching arrays) in the 
java.util.Arrays class.

Some other useful operations provided by methods in the java.util.Arrays class are:

1. Searching an array for a specific value to get the index at which it is placed 
(the binarySearch method).

STEPS:
-----------------------------------------------------------------------------------------------------
i. create and sort array
e.g. 
int arr[]=new int[]{10,54,7,24,63,100};
Arrays.sort(arr);

ii. print the sorted array(optional step just to confirm whether array is sorted or not)
e.g.
Syetem.out.println("Sorted Array : "+Arrays.toString(arr));

iii. Use binarySearch to find the index of a value
e.g.
int searchNum = 7 ;
int index = Arrays.binarySearch(arr, searchNum);

iv. Print the result
e.g.
if (index >= 0) {
  System.out.println("Element " + searchNum + " found at index: " + index);
} else {
  System.out.println("Element " + searchNum + " not found.");
}


Let's understand this with the code in Day03/ArrayExample/BinarySearch.java
----------------------------------------------------------------------------------------------------

2. Comparing two arrays to determine if they are equal or not (the equals method).

STEPS:
----------------------------------------------------------------------------------------------------
i. Create 2 or more arrays, atleast 2 arrays are required

ii. compare arrays using Array.equals()
e.g.
boolean isEqual1 = Arrays.equals(array1, array2);

Let's understand this with the code in Day03/ArrayExample/CompareArrays.java

----------------------------------------------------------------------------------------------------

3. Filling an array to place a specific value at each index (the fill method).

STEPS
----------------------------------------------------------------------------------------------------
i. Create an array of size
e.g.        
int[] numbers = new int[5];

ii. Fill the array with the value 
e.g.        
Arrays.fill(numbers, 7);

iii. Print the filled array
e.g.
System.out.println("Array after fill: " + Arrays.toString(numbers));


Let's understand thsi with the code in Day03/ArrayExample/FillMethod.java

---------------------------------------------------------------------------------------------------

4. Sorting an array into ascending order. This can be done either sequentially, using the sort method, or concurrently, using the parallelSort method introduced in 
Java SE 8. Parallel sorting of large arrays on multiprocessor systems is faster than 
sequential array sorting.

--------------------------------------------------------------------------------------------------
Already done in 1.binary search
--------------------------------------------------------------------------------------------------

5. Creating a stream that uses an array as its source (the stream method). 
For example, the following statement prints the contents of the copyTo array in the 
same way as in the previous example:

java.util.Arrays.stream(copyTo).map(coffee -> coffee + " ").forEach(System.out::print);
See Aggregate Operations for more information about streams.

STEP
--------------------------------------------------------------------------------------------------
i. Create an array of strings
e.g.
String[] copyTo = {"Espresso", "Latte", "Cappuccino", "Mocha"};

ii. Use Arrays.stream to create a stream from the array
Add a space after each element and print using forEach
e.g.
Arrays.stream(copyTo)
              .map(coffee -> coffee + " ")
              .forEach(System.out::print);

CODE Day03/ArraysExample/StreamArray.java

---------------------------------------------------------------------------------------------------

6. Converting an array to a string. The toString method converts each element of the 
array to a string, separates them with commas, then surrounds them with brackets. For example, the following statement converts the copyTo array to a string and prints it:

System.out.println(java.util.Arrays.toString(copyTo));
This statement prints the following:

[Cappuccino, Corretto, Cortado, Doppio, Espresso, Frappucino, Freddo]





:: || Strings || ::

String is the class that represents sequence of character enclosed by double quotes and every character is stored in 
16 bits, i.e., using UTF 16-bit encoding.

Package is java.lang

A string acts the same as an array of characters.

String class implements Serializable, comparable, char sequence interface.

String is the immutable, once string object is created, it cannot changed but new string objcet is created.
When we say something is immutable, it means that once it is created, it cannot be changed. In Java, this concept 
applies to strings, which means that once a string object is created, its content cannot be changed. 
If we try to change a string, Java does not modify the original one, it creates a new string object instead.

Java provides a robust and flexible API for handling strings, allowing for various operations such as concatenation, 
comparison, and manipulation.

There are two ways to create a string in Java: 

1. String Literal
2. Using new Keyword


1. String Lieteral(Static Memory):

To make Java more memory efficient(because no new objects are created if it exists already in the
string constant pool). 

Each time when you create string literal, the JVM check string constant pool first, 
if the string object is already present in the pool, reference to pooled instance is returned.
if string does not present in the pool, new string instance is created and placed in pool.


java Uses concept of string lieteral because to make java more memory effiecient( because no new object is created if it exist already in string constant pool.)


2. using new Keyword:

Example: String s = new String("test");

In Such case, JVM will create the new string object in normal(non-pool) heap memory and
lietral "test" will be placed in string constant pool. 
the variable s refer to object in heap(non-pool)

Here if we use new keyword, it will create 2 objects.


common String methods:

| Method                                | Description                         |
| ------------------------------------- | ----------------------------------- |
| `length()`                            | Returns length of string            |
| `charAt(int index)`                   | Returns character at given index    |
| `substring(int begin, int end)`       | Extracts substring                  |
| `equals(String another)`              | Compares content                    |
| `equalsIgnoreCase(String)`            | Compares ignoring case              |
| `compareTo(String another)`           | Lexicographical comparison          |
| `toLowerCase()` / `toUpperCase()`     | Case conversion                     |
| `trim()`                              | Removes leading/trailing spaces     |
| `replace(old, new)`                   | Replaces characters                 |
| `contains(String)`                    | Checks if string contains substring |
| `indexOf(char)` / `lastIndexOf(char)` | Finds character position            |
| `split(String regex)`                 | Splits string by regex              |



STRING BUFFER CLASS:

The StringBuffer class is part of the java.lang package and is used to create mutable (modifiable) sequences of 
characters. Unlike String, which is immutable, StringBuffer allows you to modify the contents of the string without 
creating new objects.

| Feature       | Description                                          |
| ------------- | ---------------------------------------------------- |
| Mutability    | Contents can be changed                              |
| Thread Safety | **Synchronized** (safe for multi-threading)          |
| Performance   | Slower than `StringBuilder` in single-threaded cases |
| Package       | `java.lang.StringBuffer`                             |


- java.lang.StringBuffer extends (or inherits from) Object class.

- All Implemented Interfaces of StringBuffer classes are Serializable, Appendable, CharSequence.

- public final class StringBuffer extends Object implements Serializable, CharSequence, Appendable.

- String buffers are safe for use by multiple threads. The methods can be synchronized wherever necessary so that all the operations on any particular instance behave as if they occur in some serial order.

- Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence)    this class synchronizes only on the string buffer performing the operation, not on the source.

- It inherits some of the methods from the Object class which such as clone(), equals(), finalize(), getClass(),       hashCode(), notifies(), notifyAll().


STRING BUILDER CLASS:

The StringBuilder class is part of the java.lang package and is used to create mutable sequences of characters like   StringBuffer, but with better performance in single-threaded environments.

Key Features:
| Feature       | Description                                         |
| ------------- | --------------------------------------------------- |
| Mutability    |   Yes (can change contents)                         |
| Thread Safety |   No (not synchronized)                             |
| Performance   |    Faster than `StringBuffer` (no overhead of sync) |
| Use-case      | Best for **single-threaded** applications           |
| Package       | `java.lang.StringBuilder`                           |

Methods:

| Method                   | Description                    |
| ------------------------ | ------------------------------ |
| `append(String)`         | Adds text at the end           |
| `insert(int, String)`    | Inserts text at a given index  |
| `replace(int, int, str)` | Replaces a range with new text |
| `delete(int, int)`       | Deletes characters in range    |
| `reverse()`              | Reverses the string            |
| `capacity()`             | Returns current capacity       |
| `ensureCapacity(int)`    | Expands buffer if needed       |
| `toString()`             | Converts to `String`           |


String vs StringBuffer vs StringBuilder

| Feature     | `String`                 | `StringBuilder`                  | `StringBuffer`       |
| ----------- | ------------------------ | -------------------------------- | -------------------- |
| Mutability  |  Immutable               | Mutable                          |   Mutable            |
| Thread-safe | (by default)             | No                               | Yes (synchronized)   |
|Performance  | Slow                     |   Fast (no sync)                 |    Slower (sync)     |
| Use-case    | Text that doesn't change | High-performance single-threaded | Multi-threaded       |



